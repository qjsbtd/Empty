apply plugin: 'com.android.application'

android {
    signingConfigs {
        release {
            //Load local.properties
            Properties properties = new Properties()
            InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream();
            properties.load(inputStream)

            keyAlias properties.get("sign.keyAlias")
            keyPassword properties.get("sign.keyPassword")
            storeFile file(properties.get("sign.storeFile"))
            storePassword properties.get("sign.storePassword")

            // Clear
            properties.clear()
        }
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.black.empty"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        flavorDimensions "1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
            }
        }
    }
    buildTypes {
        release {
            multiDexEnabled true
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            multiDexEnabled false
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    productFlavors {
        Empty {
            manifestPlaceholders = [CHANNEL_NAME: "Empty"]
        }
        Black {
            manifestPlaceholders = [CHANNEL_NAME: "Black"]
        }
    }
    applicationVariants.all {
        def buildType = it.buildType.name
        def flavorName = it.flavorName
        def versionName = it.versionName
        if (buildType == "release") {
            it.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/outApks/")
        }
        it.outputs.each {
            if (buildType == "release") {
                it.outputFileName = "${flavorName}_${versionName}.apk"
                println "fileNameï¼š-----------------${it.outputFile.parent}/${it.outputFileName}"
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
